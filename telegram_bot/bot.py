import os
import asyncio
import hashlib
import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

from server.db.session import SessionLocal
from server.models.user import User
from server.models.license import License
from server.models.machine import Machine

WAITING_FOR_MACHINE_NAME = 1
WAITING_FOR_MACHINE_TO_DELETE = 2
WAITING_FOR_PAYMENT_PROOF = 3
WAITING_FOR_MACHINE_TO_ATTACH = 4
WAITING_FOR_PAYMENT_PROOF_RENEW = 5

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = 670562262

async def cleanup_expired_licenses():
    db = SessionLocal()
    try:
        now = datetime.datetime.now()
        expired_machines = db.query(Machine).join(License).filter(
            Machine.license_id == License.id,
            License.valid_until < now
        ).all()

        for machine in expired_machines:
            machine.license_id = None

        db.commit()
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–≤—è–∑–∞–Ω–æ {len(expired_machines)} –º–∞—à–∏–Ω —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏.")
    finally:
        db.close()

async def send_main_menu(user_id, context):
    await context.bot.send_message(
        chat_id=user_id,
        text="–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üñ•Ô∏è –ú–∞—à–∏–Ω—ã", callback_data='machines_menu')],
            [InlineKeyboardButton("üîê –õ–∏—Ü–µ–Ω–∑–∏–∏", callback_data='licenses_menu')],
        ])
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üñ•Ô∏è –ú–∞—à–∏–Ω—ã", callback_data='machines_menu')],
        [InlineKeyboardButton("üîê –õ–∏—Ü–µ–Ω–∑–∏–∏", callback_data='licenses_menu')],
    ]
    await (update.message or update.callback_query.message).reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_machines_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = str(update.effective_user.id)
    db = SessionLocal()

    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        machines = db.query(Machine).filter_by(user_id=user.id).all() if user else []

        msg_lines = ["üñ•Ô∏è –í–∞—à–∏ –º–∞—à–∏–Ω—ã:"] if machines else []
        now = datetime.datetime.now()

        for m in machines:
            license = db.query(License).filter_by(id=m.license_id).first() if m.license_id else None

            if license and license.valid_until < now:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
                m.license_id = None
                db.commit()
                license = None  # –æ–±–Ω—É–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            if license:
                msg_lines.append(f"‚Ä¢ {m.name} ‚Äî üîë {license.license_key}")
            else:
                msg_lines.append(f"‚Ä¢ {m.name} ‚Äî ‚ùå –ë–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏")

        msg = "\n".join(msg_lines) if machines else "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω."

        kb = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data='add_machine')],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data='delete_machine')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ]

        await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(kb))

    finally:
        db.close()

async def show_licenses_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = str(update.effective_user.id)
    db = SessionLocal()
    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        licenses = db.query(License).filter_by(user_id=user.id).all() if user else []
        kb = []

        if not licenses:
            msg = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π."
        else:
            active_licenses = []
            expired_licenses = []
            msg_lines = ["üîê –í–∞—à–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:"]

            now = datetime.datetime.now()

            for lic in licenses:
                machine = db.query(Machine).filter_by(license_id=lic.id).first()
                is_valid = lic.valid_until > now

                # –ê–≤—Ç–æ–æ—Ç–≤—è–∑–∫–∞, –µ—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
                if machine and not is_valid:
                    machine.license_id = None
                    db.commit()
                    machine = None  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                name = machine.name if machine else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                days_left = (lic.valid_until - now).days
                status = f"{days_left} –¥–Ω." if is_valid else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"

                msg_lines.append(f"{name}: <code>{lic.license_key}</code> ({status})")

                row = []
                if not machine and is_valid:
                    row.append(InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=f"attach_{lic.id}"))
                row.append(InlineKeyboardButton("üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å" if is_valid else "‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"renew_{lic.id}"))
                kb.append(row)

                (active_licenses if is_valid else expired_licenses).append(lic)

            if len(expired_licenses) == len(licenses):
                msg_lines.append("\n‚ö†Ô∏è –í—Å–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã. –ü—Ä–æ–¥–ª–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")

            msg = "\n".join(msg_lines)

        kb.extend([
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data='pay_license')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ])

        await query.edit_message_text(msg, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))
    finally:
        db.close()


async def attach_license(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    license_id = int(query.data.split('_')[1])
    context.user_data['attach_license_id'] = license_id
    tg_id = str(update.effective_user.id)
    db = SessionLocal()
    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        machines = db.query(Machine).filter_by(user_id=user.id, license_id=None).all()
        if not machines:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(m.name, callback_data=f"attach_to_{m.id}")] for m in machines]
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="licenses_menu")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return WAITING_FOR_MACHINE_TO_ATTACH
    finally:
        db.close()

async def attach_license_to_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    machine_id = int(query.data.split('_')[-1])
    license_id = context.user_data.get('attach_license_id')

    if not license_id:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    db = SessionLocal()
    try:
        machine = db.query(Machine).filter_by(id=machine_id).first()
        license = db.query(License).filter_by(id=license_id).first()

        if not machine:
            await query.edit_message_text("–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        if not license:
            await query.edit_message_text("‚ùó –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        if license.valid_until < datetime.datetime.now():
            await query.edit_message_text("‚ùó –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞.")
            return ConversationHandler.END

        machine.license_id = license_id
        db.commit()

        await query.edit_message_text("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –º–∞—à–∏–Ω–µ.")
        await start(update, context)

    finally:
        db.close()

    return ConversationHandler.END

async def pay_license(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 50‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä +79538569110 (–°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ).\n\nüì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='licenses_menu')]])
    )
    return WAITING_FOR_PAYMENT_PROOF

async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    is_renewal = 'renew_license_id' in context.user_data
    admin_msg = f"üßæ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ {'(–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)' if is_renewal else ''}\n–û—Ç: @{user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user.id})"

    button_callback = (
        f'confirm_renew_{context.user_data["renew_license_id"]}'
        if is_renewal else
        f'grant_license_{user.id}'
    )

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=button_callback)]
    ])

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=file_id, caption=admin_msg, reply_markup=reply_markup)
    elif update.message.document:
        file_id = update.message.document.file_id
        await context.bot.send_document(chat_id=ADMIN_ID, document=file_id, caption=admin_msg, reply_markup=reply_markup)
    elif update.message.text:
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_msg + f"\n\n{update.message.text}", reply_markup=reply_markup)

    await update.message.reply_text("üì© –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return ConversationHandler.END

async def grant_license(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[-1])
    db = SessionLocal()
    try:
        user = db.query(User).filter_by(telegram_id=str(user_id)).first()
        if not user:
            user = User(telegram_id=str(user_id))
            db.add(user)
            db.commit()
            db.refresh(user)

        license_key = hashlib.sha256(f"{user_id}-{datetime.datetime.now()}".encode()).hexdigest()[:16]
        lic = License(user_id=user.id, license_key=license_key, valid_until=datetime.datetime.now() + datetime.timedelta(days=30))
        db.add(lic)
        db.commit()
        await context.bot.send_message(
            chat_id=user_id,
            text=(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è:\n<code>{license_key}</code>\n\n"
          "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –∫ –ª—é–±–æ–π –º–∞—à–∏–Ω–µ –≤ —Ä–∞–∑–¥–µ–ª–µ üîê <b>¬´–õ–∏—Ü–µ–Ω–∑–∏–∏¬ª</b>."),
          parse_mode="HTML")
        await send_main_menu(user_id, context)
        await query.edit_message_text("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –≤—ã–¥–∞–Ω–∞.")
    finally:
        db.close()

async def confirm_renew(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    license_id = int(query.data.split("_")[-1])

    db = SessionLocal()
    try:
        lic = db.query(License).filter_by(id=license_id).first()
        if not lic:
            await query.edit_message_text("‚ùó –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        now = datetime.datetime.now()
        lic.valid_until = max(lic.valid_until, now) + datetime.timedelta(days=30)
        db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter_by(id=lic.user_id).first()
        if user:
            await context.bot.send_message(
                chat_id=int(user.telegram_id),
                text=f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è <code>{lic.license_key}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.",
                parse_mode="HTML"
            )

        await query.edit_message_text("‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

    finally:
        db.close()

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.callback_query.data
    if command == 'machines_menu': 
        return await show_machines_menu(update, context)
    elif command == 'licenses_menu': 
        return await show_licenses_menu(update, context)
    elif command == 'renew_license': 
        return await update.callback_query.edit_message_text("üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif command == 'back_to_main': 
        return await start(update, context)
    elif command == 'add_machine':
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å", callback_data='cancel_add')]]))
        return WAITING_FOR_MACHINE_NAME
    elif command == 'delete_machine': 
        return await handle_delete_machine(update, context)
    elif command.startswith("delete_"): 
        return await confirm_delete_machine(update, context)
    elif command == 'cancel_delete': 
        return await cancel_delete_machine(update, context)
    elif command == 'cancel_add': 
        return await cancel_add_machine(update, context)
    elif command == 'pay_license': 
        return await pay_license(update, context)
    elif command.startswith('grant_license_'): 
        return await grant_license(update, context)
    elif command.startswith('confirm_renew_'):
        return await confirm_renew(update, context)
    elif command.startswith("attach_") and not command.startswith("attach_to_"):
        return await attach_license(update, context)
    elif command.startswith("attach_to_"):
        return await attach_license_to_machine(update, context)
    elif command.startswith("renew_"):
        return await handle_renew_license(update, context)

async def handle_renew_license(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    license_id = int(query.data.split("_")[1])
    context.user_data['renew_license_id'] = license_id

    await query.edit_message_text(
        "üí≥ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 50‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä +79538569110 (–°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ).\n\nüì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='licenses_menu')]
        ])
    )
    return WAITING_FOR_PAYMENT_PROOF

async def handle_machine_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    try:
        tg_id = str(update.effective_user.id)
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        if not user:
            user = User(telegram_id=tg_id)
            db.add(user)
            db.commit()
            db.refresh(user)
        machine = Machine(user_id=user.id, name=update.message.text)
        db.add(machine)
        db.commit()
        await update.message.reply_text(f"‚úÖ –ú–∞—à–∏–Ω–∞ '{machine.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        await start(update, context)
    finally:
        db.close()
    return ConversationHandler.END

async def handle_delete_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = str(update.effective_user.id)
    db = SessionLocal()
    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        machines = db.query(Machine).filter_by(user_id=user.id).all() if user else []
        if not machines:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(m.name, callback_data=f"delete_{m.id}")] for m in machines]
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return WAITING_FOR_MACHINE_TO_DELETE
    finally:
        db.close()

async def confirm_delete_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    db = SessionLocal()

    try:
        m_id = int(query.data.replace("delete_", ""))
        machine = db.query(Machine).filter_by(id=m_id).first()

        if not machine:
            await query.edit_message_text("‚ùó –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        # –ï—Å–ª–∏ –∫ –º–∞—à–∏–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –µ—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        if machine.license_id:
            license = db.query(License).filter_by(id=machine.license_id).first()
            if license and license.valid_until > datetime.datetime.now():
                await query.edit_message_text(
                    "‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—ë —Å—Ä–æ–∫–∞."
                )
                return ConversationHandler.END

        # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é (–∏–ª–∏ –µ—Å–ª–∏ –µ—ë —É–∂–µ –Ω–µ—Ç)
        machine.license_id = None

        # –£–¥–∞–ª—è–µ–º –º–∞—à–∏–Ω—É
        db.delete(machine)
        db.commit()

        await query.edit_message_text(f"üóë –ú–∞—à–∏–Ω–∞ '{machine.name}' —É–¥–∞–ª–µ–Ω–∞.")
        await start(update, context)

    finally:
        db.close()

    return ConversationHandler.END

async def cancel_add_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await send_main_menu(update.effective_user.id, context)
    return ConversationHandler.END

async def cancel_delete_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await send_main_menu(update.effective_user.id, context)
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_buttons)],
    states={
        WAITING_FOR_MACHINE_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_machine_name),
            CallbackQueryHandler(cancel_add_machine, pattern='^cancel_add$'),
        ],
        WAITING_FOR_MACHINE_TO_DELETE: [
            CallbackQueryHandler(confirm_delete_machine, pattern='^delete_'),
            CallbackQueryHandler(cancel_delete_machine, pattern='^cancel_delete$'),
        ],
        WAITING_FOR_PAYMENT_PROOF: [
            MessageHandler(filters.ALL, handle_payment_proof),
        ],
        WAITING_FOR_MACHINE_TO_ATTACH: [
    CallbackQueryHandler(attach_license_to_machine, pattern='^attach_to_'),
    ],

    },
    fallbacks=[CommandHandler("start", start)],
)

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    await cleanup_expired_licenses()  # üëà –í–ê–ñ–ù–û: –≤—ã–∑–≤–∞—Ç—å –¥–æ –∑–∞–ø—É—Å–∫–∞

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
