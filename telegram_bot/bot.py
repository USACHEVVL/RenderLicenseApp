import os
import asyncio
import hashlib
import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

from server.db.session import SessionLocal
from server.models.user import User
from server.models.license import License
from server.models.machine import Machine

WAITING_FOR_MACHINE_NAME = 1

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data='buy')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data='add_machine')],
        [InlineKeyboardButton("üñ•Ô∏è –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω", callback_data='list_machines')],
        [InlineKeyboardButton("üîê –ú–æ–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏", callback_data='license')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = update.message or update.callback_query.message
    await message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏ —Ä–µ–Ω–¥–µ—Ä–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data

    if command == 'buy':
        return await buy(update, context)
    elif command == 'add_machine':
        keyboard = [[InlineKeyboardButton("‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å", callback_data='cancel_add')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã:", reply_markup=reply_markup)
        return WAITING_FOR_MACHINE_NAME
    elif command == 'list_machines':
        return await list_machines(update, context)
    elif command == 'license':
        return await license_command(update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def cancel_add_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞

# –ö–æ–º–∞–Ω–¥–∞ /buy
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.reply_text("üí≥ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É @Usachev_LAB –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /add_machine <–∏–º—è>
async def add_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    tg_id = str(update.effective_user.id)
    message = update.message or update.callback_query.message

    if context.args:
        machine_name = " ".join(context.args)
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        if not user:
            user = User(telegram_id=tg_id)
            db.add(user)
            db.commit()
            db.refresh(user)

        raw = f"{tg_id}-{machine_name}"
        license_key = hashlib.sha256(raw.encode()).hexdigest()[:16]

        license = License(
            user_id=user.id,
            license_key=license_key,
            valid_until=datetime.datetime.now() + datetime.timedelta(days=30)
        )
        db.add(license)
        db.commit()
        db.refresh(license)

        machine = Machine(
            user_id=user.id,
            license_id=license.id,
            name=machine_name
        )
        db.add(machine)
        db.commit()

        await message.reply_text(
            f"‚úÖ –ú–∞—à–∏–Ω–∞ '{machine_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n"
            f"üîë –õ–∏—Ü–µ–Ω–∑–∏—è:\n<code>{license_key}</code>",
            parse_mode="HTML"
        )
    else:
        await message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add_machine <–∏–º—è>")

    db.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–∞—à–∏–Ω—ã
async def handle_machine_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    tg_id = str(update.effective_user.id)
    machine_name = update.message.text

    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        if not user:
            user = User(telegram_id=tg_id)
            db.add(user)
            db.commit()
            db.refresh(user)

        raw = f"{tg_id}-{machine_name}"
        license_key = hashlib.sha256(raw.encode()).hexdigest()[:16]

        license = License(
            user_id=user.id,
            license_key=license_key,
            valid_until=datetime.datetime.now() + datetime.timedelta(days=30)
        )
        db.add(license)
        db.commit()
        db.refresh(license)

        machine = Machine(
            user_id=user.id,
            license_id=license.id,
            name=machine_name
        )
        db.add(machine)
        db.commit()

        await update.message.reply_text(
            f"‚úÖ –ú–∞—à–∏–Ω–∞ '{machine_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n"
            f"üîë –õ–∏—Ü–µ–Ω–∑–∏—è:\n<code>{license_key}</code>",
            parse_mode="HTML"
        )
    finally:
        db.close()

    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /list_machines
async def list_machines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    db = SessionLocal()
    message = update.message or update.callback_query.message

    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        if not user:
            await message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω.")
            return

        machines = db.query(Machine).filter_by(user_id=user.id).all()
        if machines:
            msg = "üñ•Ô∏è –í–∞—à–∏ –º–∞—à–∏–Ω—ã:\n" + "\n".join(f"‚Ä¢ {m.name}" for m in machines)
        else:
            msg = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω."

        await message.reply_text(msg)
    finally:
        db.close()

# –ö–æ–º–∞–Ω–¥–∞ /license
async def license_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    db = SessionLocal()
    message = update.message or update.callback_query.message

    try:
        user = db.query(User).filter_by(telegram_id=tg_id).first()
        if not user:
            await message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π.")
            return

        licenses = db.query(License).filter_by(user_id=user.id).all()
        if licenses:
            message_lines = []
            for lic in licenses:
                machine = db.query(Machine).filter_by(license_id=lic.id).first()
                machine_name = machine.name if machine else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                message_lines.append(f"{machine_name}: <code>{lic.license_key}</code>")
            text = "üîê –í–∞—à–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:\n" + "\n".join(message_lines)
        else:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π."

        await message.reply_text(text, parse_mode="HTML")
    finally:
        db.close()

# Conversation handler
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_buttons)],
    states={
        WAITING_FOR_MACHINE_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_machine_name),
            CallbackQueryHandler(cancel_add_machine, pattern='^cancel_add$'),
        ]
    },
    fallbacks=[
        CommandHandler("start", start),
    ],
)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("add_machine", add_machine))
    app.add_handler(CommandHandler("list_machines", list_machines))
    app.add_handler(CommandHandler("license", license_command))
    app.add_handler(conv_handler)

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")

    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
