# server/api/payment_router.py

from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
from typing import Dict, Any
from yookassa import Configuration, Payment
from uuid import uuid4
import os
import logging
from dotenv import load_dotenv
from datetime import datetime, timedelta
from sqlalchemy import select

from server.db.session import SessionLocal
from server.models.user import User
from server.models.license import License
from telegram_bot.notify import send_telegram_message

load_dotenv()

router = APIRouter()

# –¶–µ–Ω–∞ –∏ URL –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env
PLAN_PRICE = os.getenv("PLAN_PRICE_RUB", "49.00")
RETURN_URL = os.getenv("PAYMENT_RETURN_URL", "https://t.me/Ano3D_bot")


# ---------- –ú–û–î–ï–õ–ò –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ Swagger (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ create_payment) ----------
class YooKassaObject(BaseModel):
    id: str
    metadata: Dict[str, Any] = {}


class YooKassaWebhookModel(BaseModel):
    event: str
    object: YooKassaObject


def _configure_yookassa_or_raise():
    shop_id = os.getenv("YOOKASSA_SHOP_ID")
    secret_key = os.getenv("YOOKASSA_SECRET_KEY")
    if not shop_id or not secret_key:
        raise HTTPException(
            status_code=500,
            detail=(
                "YOOKASSA credentials are not configured "
                "(set YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY)."
            ),
        )
    Configuration.account_id = shop_id
    Configuration.secret_key = secret_key


# ---------- –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê ----------
@router.post("/api/create_payment")
async def create_payment(request: Request):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç confirmation_url.
    –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    {
      "telegram_id": 123456789,
      "email": "user@example.com",  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–¥–ª—è —á–µ–∫–∞)
      "phone": "+79991234567"       # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–¥–ª—è —á–µ–∫–∞)
    }
    """
    body = await request.json()
    telegram_id = body.get("telegram_id")
    if not telegram_id:
        raise HTTPException(status_code=400, detail="telegram_id is required")

    # email/phone –¥–ª—è —á–µ–∫–∞ (54-–§–ó): –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö
    customer_email = (body.get("email") or "").strip()
    customer_phone = (body.get("phone") or "").strip()
    if not customer_email and not customer_phone:
        # –î–ª—è MVP –ø–æ–¥—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É, –ª—É—á—à–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
        customer_email = "test@example.com"

    _configure_yookassa_or_raise()

    payment_id = str(uuid4())

    receipt_customer: Dict[str, Any] = {}
    if customer_email:
        receipt_customer["email"] = customer_email
    if customer_phone:
        receipt_customer["phone"] = customer_phone

    try:
        payment = Payment.create(
            {
                "amount": {"value": PLAN_PRICE, "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": RETURN_URL},
                "capture": True,
                "description": f"–û–ø–ª–∞—Ç–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è Telegram ID: {telegram_id}",
                "receipt": {
                    "customer": receipt_customer,
                    "items": [
                        {
                            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ RenderLicenseApp, 30 –¥–Ω–µ–π",
                            "quantity": "1.00",
                            "amount": {"value": PLAN_PRICE, "currency": "RUB"},
                            "vat_code": 1,  # –±–µ–∑ –ù–î–°
                            # "payment_subject": "service",
                            # "payment_mode": "full_prepayment",
                        }
                    ],
                    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è:
                    # "tax_system_code": 1,
                },
                "metadata": {"telegram_id": telegram_id},
            },
            payment_id,
        )
        return {"confirmation_url": payment.confirmation.confirmation_url}

    except Exception as e:
        logging.exception("YooKassa Payment.create failed")
        raise HTTPException(status_code=502, detail=f"YooKassa error: {e}")


# ---------- –í–ï–ë–•–£–ö –û–¢ –Æ–ö–ê–°–°–´ ----------
@router.post("/api/yookassa_webhook")
async def yookassa_webhook(payload: Dict[str, Any]):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –°–´–†–û–ô payload, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –±—ã—Å—Ç—Ä–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
    –°—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ø–∏–Ω–≥' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å metadata.telegram_id).
    –ó–∞—Ç–µ–º –ø—Ä–∏ event='payment.succeeded' –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º/–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é.
    """
    try:
        logging.info(f"[WEBHOOK RAW] {payload}")
    except Exception:
        pass

    event = payload.get("event")
    obj = payload.get("object", {}) or {}
    meta = obj.get("metadata", {}) or {}
    telegram_id = meta.get("telegram_id")

    # –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ ‚Äî –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–µ–±—Ö—É–∫ –≤–æ–æ–±—â–µ –¥–æ—à—ë–ª
    if telegram_id:
        try:
            await send_telegram_message(
                chat_id=int(telegram_id),
                text=f"üîî –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω: {event}",
            )
        except Exception:
            pass

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
    if event != "payment.succeeded":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –ÆKassa –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        return {"status": f"ignored: {event}"}

    if not telegram_id:
        raise HTTPException(status_code=400, detail="No telegram_id in metadata")

    now = datetime.utcnow()

    async with SessionLocal() as db:
        # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(select(User).filter_by(telegram_id=int(telegram_id)))
        user = result.scalars().first()
        if not user:
            user = User(telegram_id=int(telegram_id))
            db.add(user)
            await db.commit()
            await db.refresh(user)

        # –∏—â–µ–º/—Å–æ–∑–¥–∞—ë–º –ª–∏—Ü–µ–Ω–∑–∏—é
        result = await db.execute(select(License).filter_by(user_id=user.id))
        lic = result.scalars().first()

        def plus_30(from_dt: datetime) -> datetime:
            return from_dt + timedelta(days=30)

        if lic:
            base = lic.valid_until or now
            lic.valid_until = plus_30(max(base, now))
            lic.is_active = True
            lic.next_charge_at = lic.valid_until
        else:
            import uuid as _uuid
            until = plus_30(now)
            lic = License(
                user_id=user.id,
                license_key=str(_uuid.uuid4()),
                is_active=True,
                valid_until=until,
                next_charge_at=until,
            )
            db.add(lic)

        await db.commit()

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await send_telegram_message(
            chat_id=int(telegram_id),
            text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!",
        )
    except Exception:
        pass

    return {"status": "ok"}
