from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from telegram import Bot
from dotenv import load_dotenv
import os
from datetime import datetime

load_dotenv()
router = APIRouter()

TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TG_TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏—Ü–µ–Ω–∑–∏–π (–∑–∞–º–µ–Ω–∏–º –ø–æ–∑–∂–µ –Ω–∞ –±–∞–∑—É)
license_registry = {
    "abc123": {"machine": "HomePC", "tg_id": "670562262"},
    "def456": {"machine": "RenderBox", "tg_id": "670562262"},
}

class RenderData(BaseModel):
    license_key: str
    machine_name: str
    log: str

@router.post("/api/render_notify")
async def render_notify(data: RenderData):
    record = license_registry.get(data.license_key)

    if not record:
        raise HTTPException(status_code=401, detail="‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á")

    if record["machine"] != data.machine_name:
        raise HTTPException(status_code=403, detail="üö´ –ú–∞—à–∏–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏")

    now = datetime.now()
    formatted = (
        f"üñ•Ô∏è {data.machine_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–µ–Ω–¥–µ—Ä\n"
        f"üïí –í—Ä–µ–º—è: {now.strftime('%H:%M')}\n"
        f"üìÖ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\n"
        f"üìù –õ–æ–≥: {data.log}"
    )

    await bot.send_message(chat_id=record["tg_id"], text=formatted)
    return {"status": "ok", "message": "–õ–æ–≥ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"}
